digraph iobufferblock {
/* 把节点的默认形状设为矩形record，默认的是圆角矩形Mrecord */
// FIXME: record rank=same failed
//node [shape = record];
node [shape = box];
rankdir="LR"

    struct6;
    struct3;
    struct1;


    subgraph ref_buf1 {
        rank="same";
        cache_write1 -> struct1 [label="write"];
        struct1 -> cache_read1 [label="read"; dir=back;];
    }

    subgraph cluster_1 {
        rankdir="TD"
        color=lightgrey;
        node [shape = record];
        struct1 -> struct2;
        // FIXME: test failed
        //cache_read1 -> struct1 -> cache_write1;
        //{rank=same; cache_read1; cache_write1; struct1; }
        label = "1. find cache";
    }

    subgraph read_buf2 {
        rank="same";
        struct3 -> cache_read2 [label="read"; dir=back;];
    }

    subgraph write_buf2 {
        rank="same";
        cache_write2 -> struct4 [label="write"];
    }

    subgraph cluster_2 {
        rankdir="TD"
        color=lightgrey;
        node [shape = record];
        struct3 -> struct4 -> struct5;
        label = "2. write cache";
    }

    subgraph {
        rank="same";
        cache_write3 -> struct7 [label="write"];
        struct7 -> cache_read3 [label="read"; dir=back;];
        cache_write2;
    }

    {rank=same; struct6;}


    subgraph cluster_3 {
        rankdir="TD"
        color=lightgrey;
        node [shape = record];
        struct6 -> struct7 -> struct8;
        label = "3. read cache";
    }


struct1 [label=<<TABLE>
    <TR>
        <TD PORT="f1" BGCOLOR="gray"><FONT COLOR="white">skip</FONT></TD>
        <TD PORT="f2" BGCOLOR="blue"><FONT COLOR="white">read_avail</FONT></TD>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail</FONT></TD>
    </TR>
    </TABLE>>];

struct2 [label=<<TABLE>
    <TR>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail                            </FONT></TD>
    </TR>
    </TABLE>>];

struct3 [label=<<TABLE>
    <TR>
        <TD PORT="f1" BGCOLOR="gray"><FONT COLOR="white">skip</FONT></TD>
        <TD PORT="f2" BGCOLOR="blue"><FONT COLOR="white">read_avail                    </FONT></TD>
    </TR>
    </TABLE>>];

struct4 [label=<<TABLE>
    <TR>
        <TD PORT="f2" BGCOLOR="blue"><FONT COLOR="white">read_avail         </FONT></TD>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail</FONT></TD>
    </TR>
    </TABLE>>];

struct5 [label=<<TABLE>
    <TR>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail                            </FONT></TD>
    </TR>
    </TABLE>>];

struct6 [label=<<TABLE>
    <TR>
        <TD PORT="f1" BGCOLOR="gray"><FONT COLOR="white">skip</FONT></TD>
        <TD PORT="f2" BGCOLOR="gray"><FONT COLOR="white">read_finish                   </FONT></TD>
    </TR>
    </TABLE>>];

struct7 [label=<<TABLE>
    <TR>
        <TD PORT="f2" BGCOLOR="gray"><FONT COLOR="white">read_finish        </FONT></TD>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail</FONT></TD>
    </TR>
    </TABLE>>];

struct8 [label=<<TABLE>
    <TR>
        <TD PORT="f3" BGCOLOR="green"><FONT COLOR="black">write_avail                            </FONT></TD>
    </TR>
    </TABLE>>];

// shape=record; failed
cache_read1 [shape=box; label="cache_read"];
cache_write1 [shape=box; label="cache_write"];
cache_read2 [shape=box; label="cache_read"];
cache_write2 [shape=box; label="cache_write"];
cache_read3 [shape=box; label="cache_read"];
cache_write3 [shape=box; label="cache_write"];

}
